services:
  db:
    image: pgvector/pgvector:pg16
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=secret_password
      - POSTGRES_DB=postgres_db
    ports:
      - "5431:5432"
    networks:
      - app_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile.dev
    volumes:
      - ./apps/backend:/app/apps/backend
      - /app/apps/backend/node_modules
    environment:
      - DATABASE_URL=postgresql://postgres_user:secret_password@db:5432/postgres_db
    ports:
      - "8000:8000"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:8000/', (res) => process.exit(res.statusCode === 200 ? 0 : 1))"]
      interval: 100s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.dev
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - /app/apps/frontend/node_modules
    ports:
      - "3174:3174"
    networks:
      - app_network
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - INTERNAL_API_URL=http://backend:8000
      - NODE_ENV=development
    depends_on:
      - backend

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
